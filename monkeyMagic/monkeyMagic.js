class e{static getDefaultConfig(){return{selector:".monkey-magic",thumbnailDelay:200,thumbnailCount:6,animationDuration:1400,thumbnailClass:"monkey-magic-thumbnail",observerEnabled:!0,threshold:1,rootMargin:"0px 0px -20% 0px",triggerOnce:!0}}constructor(t={}){this.config={...e.getDefaultConfig(),...t}}get(e){return this.config[e]}getAll(){return{...this.config}}}class t{static getTargets(e){return document.querySelectorAll(e)}static getOriginalImage(e){return e.children[0]||null}static getImageSource(e){return e.getAttribute("src")}static createThumbnailContainer(e,i=null){const n=document.createElement("div");return n.className=e,i&&t.copyElementSize(n,i),n}static copyElementSize(e,i){const n=window.getComputedStyle(i);i.getBoundingClientRect();const s={width:n.width,height:n.height,minWidth:n.minWidth,minHeight:n.minHeight,maxWidth:n.maxWidth,maxHeight:n.maxHeight,padding:n.padding,margin:n.margin,border:n.border,boxSizing:n.boxSizing,position:"absolute",top:"0",left:"0",zIndex:"10"};t.setStyles(e,s)}static createThumbnailFigure(e,t){const i=document.createElement("figure"),n=document.createElement("img");return n.src=e,n.alt=`monkey-magic-thumbnail-${t}`,n.loading="lazy",i.appendChild(n),i}static setStyles(e,t){Object.assign(e.style,t)}}class i{constructor(e){this.config=e}executeAnimation(e,i,n){this.setupTargetPosition(e),this.hideOriginalImage(i);const s=t.createThumbnailContainer(this.config.get("thumbnailClass"),i);e.appendChild(s),this.createThumbnailSequence(s,n),this.scheduleAnimationComplete(i,s)}setupTargetPosition(e){"static"===window.getComputedStyle(e).position&&t.setStyles(e,{position:"relative"})}hideOriginalImage(e){t.setStyles(e,{opacity:"0"})}createThumbnailSequence(e,i){const n=this.config.get("thumbnailCount"),s=this.config.get("thumbnailDelay");for(let r=1;r<=n;r++)setTimeout(()=>{const n=t.createThumbnailFigure(i,r);e.appendChild(n)},r*s)}scheduleAnimationComplete(e,t){const i=this.config.get("animationDuration");setTimeout(()=>{this.completeAnimation(e,t)},i)}completeAnimation(e,i){t.setStyles(e,{opacity:"1"}),t.setStyles(i,{opacity:"0"}),setTimeout(()=>{i.parentNode&&i.parentNode.removeChild(i)},1e3)}}class n{static validateTargets(e,t){return 0!==e.length||(console.warn(`要素が見つかりません: ${t}`),!1)}static validateImage(e,t){return!!t||(console.warn("画像要素が見つかりません:",e),!1)}static validateImageSource(e,t){return!!t||(console.warn("画像のsrc属性が見つかりません:",e),!1)}static validateIntersectionObserverSupport(){return"IntersectionObserver"in window||(console.warn("IntersectionObserverがサポートされていません。即座に実行します。"),!1)}}class s{constructor(e,t){this.config=e,this.onIntersect=t,this.observer=null,this.processedTargets=new Set}init(e){if(!n.validateIntersectionObserverSupport())return void e.forEach(e=>this.onIntersect(e));const t=this.getObserverOptions();this.observer=new IntersectionObserver(this.handleIntersection.bind(this),t),e.forEach(e=>{this.observer.observe(e)})}getObserverOptions(){return{root:null,rootMargin:this.config.get("rootMargin"),threshold:this.config.get("threshold")}}handleIntersection(e){e.forEach(e=>{if(e.isIntersecting){const t=e.target;if(this.config.get("triggerOnce")&&this.processedTargets.has(t))return;this.onIntersect(t),this.processedTargets.add(t),this.config.get("triggerOnce")&&this.observer.unobserve(t)}})}destroy(){this.observer&&(this.observer.disconnect(),this.observer=null),this.processedTargets.clear()}}class MonkeyMagicAnimator{constructor(t={}){this.config=new e(t),this.animationExecutor=new i(this.config),this.observerManager=null}init(){const e=t.getTargets(this.config.get("selector"));n.validateTargets(e,this.config.get("selector"))&&(this.setInitialImageState(e),this.config.get("observerEnabled")?this.initWithObserver(e):this.initImmediate(e))}setInitialImageState(e){e.forEach(e=>{const i=t.getOriginalImage(e);i&&t.setStyles(i,{opacity:"0"})})}initWithObserver(e){this.observerManager=new s(this.config,e=>this.processTarget(e)),this.observerManager.init(e)}initImmediate(e){e.forEach(e=>this.processTarget(e))}processTarget(e){const i=t.getOriginalImage(e);if(!n.validateImage(e,i))return;const s=t.getImageSource(i);n.validateImageSource(i,s)&&this.animationExecutor.executeAnimation(e,i,s)}destroy(){this.observerManager&&(this.observerManager.destroy(),this.observerManager=null)}}export{MonkeyMagicAnimator};
